// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TownOfStettler.Data;

#nullable disable

namespace TownOfStettler.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221015014739_migrations")]
    partial class migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<double>("Destroyed")
                        .HasColumnType("double");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device Type ID");

                    b.Property<int?>("InstalledSoftware01")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (01)");

                    b.Property<int?>("InstalledSoftware02")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (02)");

                    b.Property<int?>("InstalledSoftware03")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (03)");

                    b.Property<int?>("InstalledSoftware04")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (04)");

                    b.Property<int?>("InstalledSoftware05")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (05)");

                    b.Property<int?>("InstalledSoftware06")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (06)");

                    b.Property<int?>("InstalledSoftware07")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (07)");

                    b.Property<int?>("InstalledSoftware08")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (08)");

                    b.Property<int?>("InstalledSoftware09")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (09)");

                    b.Property<int?>("InstalledSoftware10")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (10)");

                    b.Property<int?>("InstalledSoftware11")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (11)");

                    b.Property<int?>("InstalledSoftware12")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (12)");

                    b.Property<int?>("InstalledSoftware13")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (13)");

                    b.Property<int?>("InstalledSoftware14")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (14)");

                    b.Property<int?>("InstalledSoftware15")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (15)");

                    b.Property<int?>("InstalledSoftware16")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (16)");

                    b.Property<int?>("InstalledSoftware17")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (17)");

                    b.Property<int?>("InstalledSoftware18")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (18)");

                    b.Property<int?>("InstalledSoftware19")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (19)");

                    b.Property<int?>("InstalledSoftware20")
                        .HasColumnType("int(11)")
                        .HasColumnName("Installed Software (20)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Model Number");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Operating System");

                    b.Property<int>("OwnerLocation")
                        .HasColumnType("int(11)")
                        .HasColumnName("Owner/Location");

                    b.Property<string>("PowerSupply")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("Power Supply");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase Date");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("Purchase Price");

                    b.Property<string>("PurchaseStore")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Purchase Store");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("TOS Number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceTypeId" }, "Device Type ID");

                    b.HasIndex(new[] { "InstalledSoftware02" }, "Installed Software (02)");

                    b.HasIndex(new[] { "InstalledSoftware03" }, "Installed Software (03)");

                    b.HasIndex(new[] { "InstalledSoftware04" }, "Installed Software (04)");

                    b.HasIndex(new[] { "InstalledSoftware05" }, "Installed Software (05)");

                    b.HasIndex(new[] { "InstalledSoftware06" }, "Installed Software (06)");

                    b.HasIndex(new[] { "InstalledSoftware07" }, "Installed Software (07)");

                    b.HasIndex(new[] { "InstalledSoftware08" }, "Installed Software (08)");

                    b.HasIndex(new[] { "InstalledSoftware09" }, "Installed Software (09)");

                    b.HasIndex(new[] { "InstalledSoftware10" }, "Installed Software (10)");

                    b.HasIndex(new[] { "InstalledSoftware11" }, "Installed Software (11)");

                    b.HasIndex(new[] { "InstalledSoftware12" }, "Installed Software (12)");

                    b.HasIndex(new[] { "InstalledSoftware13" }, "Installed Software (13)");

                    b.HasIndex(new[] { "InstalledSoftware14" }, "Installed Software (14)");

                    b.HasIndex(new[] { "InstalledSoftware15" }, "Installed Software (15)");

                    b.HasIndex(new[] { "InstalledSoftware16" }, "Installed Software (16)");

                    b.HasIndex(new[] { "InstalledSoftware17" }, "Installed Software (17)");

                    b.HasIndex(new[] { "InstalledSoftware18" }, "Installed Software (18)");

                    b.HasIndex(new[] { "InstalledSoftware19" }, "Installed Software (19)");

                    b.HasIndex(new[] { "InstalledSoftware20" }, "Installed Software (20)");

                    b.HasIndex(new[] { "OwnerLocation" }, "Owner/Location");

                    b.HasIndex(new[] { "InstalledSoftware01" }, "device information_ibfk_3");

                    b.ToTable("device information", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.DisplayMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfOutputs")
                        .HasColumnType("int(11)")
                        .HasColumnName("Number of Outputs");

                    b.Property<string>("OutputType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Output Type");

                    b.Property<int?>("RefreshRateHz")
                        .HasColumnType("int(3)")
                        .HasColumnName("Refresh Rate (Hz)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Serial Number");

                    b.Property<int>("ViewSizeInches")
                        .HasColumnType("int(3)")
                        .HasColumnName("View Size (Inches)");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("View Type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID");

                    b.ToTable("display monitors", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.EthernetNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool?>("Bluetooth")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Destroyed")
                        .HasColumnType("double");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Wireless")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID1");

                    b.ToTable("ethernet/network", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("SizeGb")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Size (Gb)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID2");

                    b.ToTable("hard drive", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.HardwareDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("TypeOfHardware")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Type of Hardware");

                    b.HasKey("Id");

                    b.ToTable("hardware device", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly>("DateOfChanges")
                        .HasColumnType("date")
                        .HasColumnName("Date of Changes");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OutOfServiceDate")
                        .HasColumnType("date")
                        .HasColumnName("Out of Service Date");

                    b.Property<int>("PartsChanged")
                        .HasColumnType("int(11)")
                        .HasColumnName("Parts Changed");

                    b.Property<bool>("PartsRemoved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Parts Removed");

                    b.Property<int>("PastOwnerS")
                        .HasColumnType("int(11)")
                        .HasColumnName("Past Owner(s)");

                    b.Property<bool>("Wiped")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID3");

                    b.HasIndex(new[] { "PastOwnerS" }, "Owner");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Modification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("HardDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Hard Drive ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Processor ID");

                    b.Property<int?>("RamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("RAM ID");

                    b.Property<int?>("SecondaryDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Secondary Drive ID");

                    b.Property<int?>("SoundCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Sound Card ID");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HardDriveId" }, "Hard Drive ID");

                    b.HasIndex(new[] { "ProcessorId" }, "Processor ID");

                    b.HasIndex(new[] { "RamId" }, "RAM ID");

                    b.HasIndex(new[] { "SecondaryDriveId" }, "Secondary Drive ID");

                    b.HasIndex(new[] { "SoundCardId" }, "Sound Card ID");

                    b.HasIndex(new[] { "VideoCardId" }, "Video Card ID");

                    b.ToTable("modifications", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.OtherHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OwnerLocation")
                        .HasColumnType("int(11)")
                        .HasColumnName("Owner/Location");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TOS Number");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OwnerLocation" }, "Owner/Location1");

                    b.ToTable("other hardware", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Output", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfOutputs")
                        .HasColumnType("int(2)")
                        .HasColumnName("Number of Outputs");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Type")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VideoCardId" }, "Video Card ID1");

                    b.ToTable("outputs", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.OwnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone Number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID5");

                    b.ToTable("owner/location", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceHistoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device History ID");

                    b.Property<int?>("HardDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Hard Drive ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OriginalDeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Original Device ID");

                    b.Property<int?>("RamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("RAM ID");

                    b.Property<int?>("SecondaryDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Secondary Drive ID");

                    b.Property<int?>("SoundCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Sound Card ID");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceHistoryId" }, "Device History ID");

                    b.HasIndex(new[] { "HardDriveId" }, "Hard Drive ID1");

                    b.HasIndex(new[] { "OriginalDeviceId" }, "Original Device ID");

                    b.HasIndex(new[] { "RamId" }, "RAM ID1");

                    b.HasIndex(new[] { "SecondaryDriveId" }, "Secondary y Drive ID");

                    b.HasIndex(new[] { "SoundCardId" }, "Sound Card ID1");

                    b.HasIndex(new[] { "VideoCardId" }, "Video Card ID2");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Connection Type");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID")
                        .HasDatabaseName("Device ID4");

                    b.ToTable("printers", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Processsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("CoreCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("Core Count");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int>("Generation")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<decimal>("SpeedGhz")
                        .HasPrecision(3, 3)
                        .HasColumnType("decimal(3,3)")
                        .HasColumnName("Speed (GHz)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID6");

                    b.ToTable("processsor", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("SpeedMhz")
                        .HasColumnType("int(5)")
                        .HasColumnName("Speed (MHz)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID7");

                    b.ToTable("ram", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.SecondaryDrife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("Removable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID8");

                    b.ToTable("secondary drives", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(50)")
                        .HasColumnName("ID");

                    b.Property<string>("AssociatedAccount")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Associated Account");

                    b.Property<int>("DevicesAllowed")
                        .HasColumnType("int(11)")
                        .HasColumnName("Devices Allowed");

                    b.Property<DateOnly?>("EndOfSupportDate")
                        .HasColumnType("date")
                        .HasColumnName("End of Support Date");

                    b.Property<string>("ProductKey")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Product Key");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase Date");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Purchase Price");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Software Name");

                    b.Property<bool>("Subscription")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("SubscriptionEndDate")
                        .HasColumnType("date")
                        .HasColumnName("Subscription End Date");

                    b.HasKey("Id");

                    b.ToTable("software", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID9");

                    b.ToTable("sound card", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RamSizeGb")
                        .HasColumnType("int(11)")
                        .HasColumnName("Ram Size (GB)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID10");

                    b.ToTable("video card", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Warranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("LengthOfWarranty")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Length of Warranty");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfWarranty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Type of Warranty");

                    b.Property<DateOnly?>("WarrantyExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("Warranty Expiry Date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID11");

                    b.ToTable("warranty", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.HasOne("TownOfStettler.Models.HardwareDevice", "DeviceType")
                        .WithMany("DeviceInformations")
                        .HasForeignKey("DeviceTypeId")
                        .IsRequired()
                        .HasConstraintName("device information_ibfk_1");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware01Navigation")
                        .WithMany("DeviceInformationInstalledSoftware01Navigations")
                        .HasForeignKey("InstalledSoftware01")
                        .HasConstraintName("device information_ibfk_3");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware02Navigation")
                        .WithMany("DeviceInformationInstalledSoftware02Navigations")
                        .HasForeignKey("InstalledSoftware02")
                        .HasConstraintName("device information_ibfk_4");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware03Navigation")
                        .WithMany("DeviceInformationInstalledSoftware03Navigations")
                        .HasForeignKey("InstalledSoftware03")
                        .HasConstraintName("device information_ibfk_5");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware04Navigation")
                        .WithMany("DeviceInformationInstalledSoftware04Navigations")
                        .HasForeignKey("InstalledSoftware04")
                        .HasConstraintName("device information_ibfk_6");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware05Navigation")
                        .WithMany("DeviceInformationInstalledSoftware05Navigations")
                        .HasForeignKey("InstalledSoftware05")
                        .HasConstraintName("device information_ibfk_7");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware06Navigation")
                        .WithMany("DeviceInformationInstalledSoftware06Navigations")
                        .HasForeignKey("InstalledSoftware06")
                        .HasConstraintName("device information_ibfk_8");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware07Navigation")
                        .WithMany("DeviceInformationInstalledSoftware07Navigations")
                        .HasForeignKey("InstalledSoftware07")
                        .HasConstraintName("device information_ibfk_9");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware08Navigation")
                        .WithMany("DeviceInformationInstalledSoftware08Navigations")
                        .HasForeignKey("InstalledSoftware08")
                        .HasConstraintName("device information_ibfk_10");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware09Navigation")
                        .WithMany("DeviceInformationInstalledSoftware09Navigations")
                        .HasForeignKey("InstalledSoftware09")
                        .HasConstraintName("device information_ibfk_11");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware10Navigation")
                        .WithMany("DeviceInformationInstalledSoftware10Navigations")
                        .HasForeignKey("InstalledSoftware10")
                        .HasConstraintName("device information_ibfk_12");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware11Navigation")
                        .WithMany("DeviceInformationInstalledSoftware11Navigations")
                        .HasForeignKey("InstalledSoftware11")
                        .HasConstraintName("device information_ibfk_13");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware12Navigation")
                        .WithMany("DeviceInformationInstalledSoftware12Navigations")
                        .HasForeignKey("InstalledSoftware12")
                        .HasConstraintName("device information_ibfk_14");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware13Navigation")
                        .WithMany("DeviceInformationInstalledSoftware13Navigations")
                        .HasForeignKey("InstalledSoftware13")
                        .HasConstraintName("device information_ibfk_15");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware14Navigation")
                        .WithMany("DeviceInformationInstalledSoftware14Navigations")
                        .HasForeignKey("InstalledSoftware14")
                        .HasConstraintName("device information_ibfk_16");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware15Navigation")
                        .WithMany("DeviceInformationInstalledSoftware15Navigations")
                        .HasForeignKey("InstalledSoftware15")
                        .HasConstraintName("device information_ibfk_17");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware16Navigation")
                        .WithMany("DeviceInformationInstalledSoftware16Navigations")
                        .HasForeignKey("InstalledSoftware16")
                        .HasConstraintName("device information_ibfk_18");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware17Navigation")
                        .WithMany("DeviceInformationInstalledSoftware17Navigations")
                        .HasForeignKey("InstalledSoftware17")
                        .HasConstraintName("device information_ibfk_19");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware18Navigation")
                        .WithMany("DeviceInformationInstalledSoftware18Navigations")
                        .HasForeignKey("InstalledSoftware18")
                        .HasConstraintName("device information_ibfk_20");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware19Navigation")
                        .WithMany("DeviceInformationInstalledSoftware19Navigations")
                        .HasForeignKey("InstalledSoftware19")
                        .HasConstraintName("device information_ibfk_21");

                    b.HasOne("TownOfStettler.Models.Software", "InstalledSoftware20Navigation")
                        .WithMany("DeviceInformationInstalledSoftware20Navigations")
                        .HasForeignKey("InstalledSoftware20")
                        .HasConstraintName("device information_ibfk_22");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "OwnerLocationNavigation")
                        .WithMany("DeviceInformations")
                        .HasForeignKey("OwnerLocation")
                        .IsRequired()
                        .HasConstraintName("device information_ibfk_2");

                    b.Navigation("DeviceType");

                    b.Navigation("InstalledSoftware01Navigation");

                    b.Navigation("InstalledSoftware02Navigation");

                    b.Navigation("InstalledSoftware03Navigation");

                    b.Navigation("InstalledSoftware04Navigation");

                    b.Navigation("InstalledSoftware05Navigation");

                    b.Navigation("InstalledSoftware06Navigation");

                    b.Navigation("InstalledSoftware07Navigation");

                    b.Navigation("InstalledSoftware08Navigation");

                    b.Navigation("InstalledSoftware09Navigation");

                    b.Navigation("InstalledSoftware10Navigation");

                    b.Navigation("InstalledSoftware11Navigation");

                    b.Navigation("InstalledSoftware12Navigation");

                    b.Navigation("InstalledSoftware13Navigation");

                    b.Navigation("InstalledSoftware14Navigation");

                    b.Navigation("InstalledSoftware15Navigation");

                    b.Navigation("InstalledSoftware16Navigation");

                    b.Navigation("InstalledSoftware17Navigation");

                    b.Navigation("InstalledSoftware18Navigation");

                    b.Navigation("InstalledSoftware19Navigation");

                    b.Navigation("InstalledSoftware20Navigation");

                    b.Navigation("OwnerLocationNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.DisplayMonitor", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("DisplayMonitors")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("display monitors_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.EthernetNetwork", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("EthernetNetworks")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("ethernet/network_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("HardDrives")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("hard drive_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("history_ibfk_1");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "PastOwnerSNavigation")
                        .WithMany("Histories")
                        .HasForeignKey("PastOwnerS")
                        .IsRequired()
                        .HasConstraintName("history_ibfk_2");

                    b.Navigation("Device");

                    b.Navigation("PastOwnerSNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.Modification", b =>
                {
                    b.HasOne("TownOfStettler.Models.HardDrive", "HardDrive")
                        .WithMany("Modifications")
                        .HasForeignKey("HardDriveId")
                        .HasConstraintName("modifications_ibfk_1");

                    b.HasOne("TownOfStettler.Models.Processsor", "Processor")
                        .WithMany("Modifications")
                        .HasForeignKey("ProcessorId")
                        .HasConstraintName("modifications_ibfk_2");

                    b.HasOne("TownOfStettler.Models.Ram", "Ram")
                        .WithMany("Modifications")
                        .HasForeignKey("RamId")
                        .HasConstraintName("modifications_ibfk_3");

                    b.HasOne("TownOfStettler.Models.SecondaryDrife", "SecondaryDrive")
                        .WithMany("Modifications")
                        .HasForeignKey("SecondaryDriveId")
                        .HasConstraintName("modifications_ibfk_4");

                    b.HasOne("TownOfStettler.Models.SoundCard", "SoundCard")
                        .WithMany("Modifications")
                        .HasForeignKey("SoundCardId")
                        .HasConstraintName("modifications_ibfk_5");

                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Modifications")
                        .HasForeignKey("VideoCardId")
                        .HasConstraintName("modifications_ibfk_6");

                    b.Navigation("HardDrive");

                    b.Navigation("Processor");

                    b.Navigation("Ram");

                    b.Navigation("SecondaryDrive");

                    b.Navigation("SoundCard");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.OtherHardware", b =>
                {
                    b.HasOne("TownOfStettler.Models.OwnerLocation", "OwnerLocationNavigation")
                        .WithMany("OtherHardwares")
                        .HasForeignKey("OwnerLocation")
                        .IsRequired()
                        .HasConstraintName("other hardware_ibfk_1");

                    b.Navigation("OwnerLocationNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.Output", b =>
                {
                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Outputs")
                        .HasForeignKey("VideoCardId")
                        .IsRequired()
                        .HasConstraintName("outputs_ibfk_1");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.OwnerLocation", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("OwnerLocations")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("owner/location_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Part", b =>
                {
                    b.HasOne("TownOfStettler.Models.History", "DeviceHistory")
                        .WithMany("Parts")
                        .HasForeignKey("DeviceHistoryId")
                        .IsRequired()
                        .HasConstraintName("parts_ibfk_7");

                    b.HasOne("TownOfStettler.Models.HardDrive", "HardDrive")
                        .WithMany("Parts")
                        .HasForeignKey("HardDriveId")
                        .HasConstraintName("parts_ibfk_2");

                    b.HasOne("TownOfStettler.Models.DeviceInformation", "OriginalDevice")
                        .WithMany("Parts")
                        .HasForeignKey("OriginalDeviceId")
                        .IsRequired()
                        .HasConstraintName("parts_ibfk_8");

                    b.HasOne("TownOfStettler.Models.Ram", "Ram")
                        .WithMany("Parts")
                        .HasForeignKey("RamId")
                        .HasConstraintName("parts_ibfk_3");

                    b.HasOne("TownOfStettler.Models.SecondaryDrife", "SecondaryDrive")
                        .WithMany("Parts")
                        .HasForeignKey("SecondaryDriveId")
                        .HasConstraintName("parts_ibfk_4");

                    b.HasOne("TownOfStettler.Models.SoundCard", "SoundCard")
                        .WithMany("Parts")
                        .HasForeignKey("SoundCardId")
                        .HasConstraintName("parts_ibfk_5");

                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Parts")
                        .HasForeignKey("VideoCardId")
                        .HasConstraintName("parts_ibfk_6");

                    b.Navigation("DeviceHistory");

                    b.Navigation("HardDrive");

                    b.Navigation("OriginalDevice");

                    b.Navigation("Ram");

                    b.Navigation("SecondaryDrive");

                    b.Navigation("SoundCard");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.Printer", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Printers")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("printers_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Processsor", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Processsors")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("processsor_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Rams")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("ram_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.SecondaryDrife", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("SecondaryDrives")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("secondary drives_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("SoundCards")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("sound card_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("VideoCards")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("video card_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Warranty", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("warranty_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.Navigation("DisplayMonitors");

                    b.Navigation("EthernetNetworks");

                    b.Navigation("HardDrives");

                    b.Navigation("Histories");

                    b.Navigation("OwnerLocations");

                    b.Navigation("Parts");

                    b.Navigation("Printers");

                    b.Navigation("Processsors");

                    b.Navigation("Rams");

                    b.Navigation("SecondaryDrives");

                    b.Navigation("SoundCards");

                    b.Navigation("VideoCards");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardwareDevice", b =>
                {
                    b.Navigation("DeviceInformations");
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.OwnerLocation", b =>
                {
                    b.Navigation("DeviceInformations");

                    b.Navigation("Histories");

                    b.Navigation("OtherHardwares");
                });

            modelBuilder.Entity("TownOfStettler.Models.Processsor", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.SecondaryDrife", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.Software", b =>
                {
                    b.Navigation("DeviceInformationInstalledSoftware01Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware02Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware03Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware04Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware05Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware06Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware07Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware08Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware09Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware10Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware11Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware12Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware13Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware14Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware15Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware16Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware17Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware18Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware19Navigations");

                    b.Navigation("DeviceInformationInstalledSoftware20Navigations");
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Outputs");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
